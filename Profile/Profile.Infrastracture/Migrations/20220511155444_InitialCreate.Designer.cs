// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Profile.Infrastracture.Context;

#nullable disable

namespace Profile.Infrastracture.Migrations
{
    [DbContext(typeof(ProfileContext))]
    [Migration("20220511155444_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Profile.Domain.Diary.DiaryRecordEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("CourseId")
                        .HasColumnType("text")
                        .HasColumnName("course_id");

                    b.Property<string>("TaskId")
                        .HasColumnType("text")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("AnswerGivenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answer_given_at");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("module_id");

                    b.Property<float?>("Score")
                        .HasColumnType("real")
                        .HasColumnName("score");

                    b.HasKey("UserId", "CourseId", "TaskId");

                    b.ToTable("profile_diary_recod_entity", (string)null);
                });

            modelBuilder.Entity("Profile.Domain.Diary.StudentDiaryEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("CourseId")
                        .HasColumnType("text")
                        .HasColumnName("course_id");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("course_name");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("UserId", "CourseId");

                    b.ToTable("profile_student_diary_entity", (string)null);
                });

            modelBuilder.Entity("Profile.Domain.Diary.TeacherDiaryEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("CourseId")
                        .HasColumnType("text")
                        .HasColumnName("course_id");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("course_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("UserId", "CourseId");

                    b.ToTable("profile_teacher_diary_entity", (string)null);
                });

            modelBuilder.Entity("Profile.Domain.Profile.ProfileEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("UserId");

                    b.ToTable("profile_entity", (string)null);
                });

            modelBuilder.Entity("Profile.Domain.Diary.DiaryRecordEntity", b =>
                {
                    b.HasOne("Profile.Domain.Diary.StudentDiaryEntity", "Diary")
                        .WithMany("Records")
                        .HasForeignKey("UserId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("Profile.Domain.Diary.StudentDiaryEntity", b =>
                {
                    b.HasOne("Profile.Domain.Profile.ProfileEntity", "UserProfile")
                        .WithMany("StudentDiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Profile.Domain.Diary.TeacherDiaryEntity", b =>
                {
                    b.HasOne("Profile.Domain.Profile.ProfileEntity", "UserProfile")
                        .WithMany("TeacherDiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Profile.Domain.Diary.StudentDiaryEntity", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Profile.Domain.Profile.ProfileEntity", b =>
                {
                    b.Navigation("StudentDiaries");

                    b.Navigation("TeacherDiaries");
                });
#pragma warning restore 612, 618
        }
    }
}
